import streamlit as st
from PIL import Image
import torch
import pandas as pd

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

import predict


st.title('üé® Artwork classifier')
st.write('This tool uses a selected deep learning model for classifying artwork into various styles and predicting whether it was created by a human artist or generated by AI.')

st.sidebar.write(f'### Select or upload image for analysis')

img = st.sidebar.selectbox(
    'Select Image',
    ['', 'abbott-handerson-thayer_below-mount-monadnock-1913.jpg', 'carolus-duran_mrs-william-astor-1890.jpg',
     'pyotr-konchalovsky_still-life-on-the-background-of-the-carpet-oranges-and-coffee-1938.jpg', 'winslow-homer_warm-afternoon-shepherdess.jpg'],
     index = 0
)

uploaded_file = st.sidebar.file_uploader("Upload an Image", type=["png", "jpg"])


st.sidebar.markdown("<hr>", unsafe_allow_html=True)

st.sidebar.write(f'### Select model used for prediction')

style_name = st.sidebar.selectbox(
    'Select Model',
    ['', 'CNN', 'ResNet18', 'ResNet18 with augmentation'], index = 0
)


# Proceed only if a model and image are selected
if style_name and (img or uploaded_file):
    model = "notebooks/final_model/" + style_name + ".pth"
    input_image = "data/app/" + img if img else uploaded_file

    # Function to convert PNG to JPG
    def convert_png_to_jpg(image: Image.Image) -> Image.Image:
        if image.mode == 'RGBA':
            # If the image has an alpha channel (RGBA), convert it to RGB first
            image = image.convert('RGB')
        return image

    # Add information about the selected model
    model_descriptions = {
        'CNN': 'A simple Convolutional Neural Network (CNN) model trained for artwork classification.',
        'ResNet18': 'A ResNet18 model, a deeper network architecture known for residual connections, trained for artwork classification.',
        'ResNet18 with augmentation': 'A ResNet18 model trained with data augmentation techniques to improve generalization.'
    }

    st.markdown("<hr>", unsafe_allow_html=True)

    # Display selected model description
    # Add underlined text with an icon

    st.markdown('#### üõ†Ô∏è Analysis Setup', unsafe_allow_html=True) 
    st.write(f'##### 1. Model Selected: {style_name}')
    st.write(model_descriptions[style_name])

    st.write('##### 2. Source image:')
    image = Image.open(input_image)

    # If the image is in PNG format, convert it to JPG
    if image.format == 'PNG':
        image = convert_png_to_jpg(image)

    st.image(image, width=400) # image: numpy array



    clicked = st.button('Analyze')

    st.markdown("<hr>", unsafe_allow_html=True)

    if clicked:
        model = predict.load_model(model, map_location=device)

        # Ensure the image is a PIL image before passing it to the model
        if isinstance(image, Image.Image):
            # Perform the stylization or classification on the image
            predicted_label, all_scores = predict.stylize(model, image)
            # Convert it into a DataFrame for better table formatting
            df = pd.DataFrame(all_scores, columns=["Class Label", "Confidence Score"])
            df = df.reset_index(drop=True)
            df = df[:6]
        else:
            st.write("Error: The uploaded image is not a valid format.")

        st.write('#### üìÑ Evaluation Results')
        # Display the predicted label
        st.write('##### 1. Predicted Label:')
        st.write(f"'{predicted_label}' - is a predicted label for this artwork.")

        # Display the table with sorted labels and confidence scores
        st.write('##### 2. Sorted Class Indices and Confidence Scores:')
        st.write("Top 5 other labels and their scores.")


        # Style the DataFrame and center the text
        st.markdown("""
            <style>
                .stDataFrame thead th {
                    text-align: center;
                }
                .stDataFrame tbody td {
                    text-align: center;
                    vertical-align: middle;
                }
            </style>
        """, unsafe_allow_html=True)

        # Display the DataFrame as an interactive table without the index column
        st.dataframe(df, hide_index=True)  # Exclude index column and center content

else:
    st.write("Please select a model and an image to analyze. You can either select image from available options or upload your own.")